'use client';

import {useRef, useState, useCallback, useEffect} from 'react';

export default function useCamera() {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [stream, setStream] = useState<MediaStream | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const startCamera = useCallback(async () => {
    setIsLoading(true);
    setError(null);

    try {
      const mediaStream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: 'user', width: 1280, height: 720 },
        audio: false,
      });


      if (videoRef.current) {
        videoRef.current.srcObject = mediaStream;

        videoRef.current.onloadedmetadata = () => {
          videoRef.current?.play().catch(e => {
            console.error('6. –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ video.play():', e);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞.');
          });
        };
      } else {
        console.warn('4. –≠–ª–µ–º–µ–Ω—Ç <video> (videoRef.current) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
      }


      setStream(mediaStream);

    } catch (err) {
      if (err instanceof Error) {
        if (err.name === 'NotAllowedError') {
          console.error('–û—à–∏–±–∫–∞ getUserMedia:', err.name, '–°–æ–æ–±—â–µ–Ω–∏–µ:', err.message);

          setError('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.');
        } else if (err.name === 'NotFoundError') {
          setError('–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.');
        } else {
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ.');
        }
      }
    } finally {
      setIsLoading(false);
    }
  }, [videoRef]);

  useEffect(() => {
    if (videoRef.current && !stream && !isLoading) {
      startCamera();
    }
  }, [videoRef.current, stream, isLoading, startCamera]);

  useEffect(() => {
    if (videoRef.current && stream && !videoRef.current.srcObject) {
      videoRef.current.srcObject = stream;

      videoRef.current.onloadedmetadata = () => {
        videoRef.current?.play().catch(e => {
          console.error('‚Üí –û—à–∏–±–∫–∞ play():', e);
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞.');
        });
      };
    }
  }, [stream]);

  const stopCamera = useCallback(() => {
    if (stream) {
      stream.getTracks().forEach((track) => track.stop());
      setStream(null);
    }
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
  }, [stream]);

  const capturePhoto = useCallback((): string | null => {
    if (!videoRef.current) return null;

    const video = videoRef.current;
    const canvas = document.createElement('canvas');

    // Aspect ratio –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤)
    // 1:1 = –∫–≤–∞–¥—Ä–∞—Ç (1.0)
    // 3:4 = –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç (0.75)
    // 9:16 = –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (0.5625)
    // 2:3 = —Å—Ä–µ–¥–Ω–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç (0.6667)
    const aspectRatio = 1 / 1;

    let width = video.videoWidth;
    let height = video.videoHeight;

    // Crop –∫ –Ω—É–∂–Ω–æ–º—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω
    if (width / height > aspectRatio) {
      // –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–æ–µ - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
      width = height * aspectRatio;
    } else {
      // –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
      height = width / aspectRatio;
    }

    canvas.width = width;
    canvas.height = height;

    const context = canvas.getContext('2d');
    if (!context) return null;

    // –í—ã—á–∏—Å–ª—è–µ–º offset –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    const offsetX = (video.videoWidth - width) / 2;
    const offsetY = (video.videoHeight - height) / 2;

    // –†–∏—Å—É–µ–º —Å crop'–æ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
    context.drawImage(
      video,
      offsetX, offsetY, width, height,  // –ò—Å—Ç–æ—á–Ω–∏–∫ (crop)
      0, 0, width, height                // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ (canvas)
    );

    console.log(`üì∏ –§–æ—Ç–æ –∑–∞—Ö–≤–∞—á–µ–Ω–æ: ${width}x${height} (aspect ratio: ${aspectRatio})`);

    return canvas.toDataURL('image/jpeg', 0.9);
  }, []);

  return {
    videoRef,
    stream,
    error,
    isLoading,
    startCamera,
    stopCamera,
    capturePhoto,
  };
}